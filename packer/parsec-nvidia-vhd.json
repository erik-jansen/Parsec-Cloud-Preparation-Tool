{
  "variables": {
    "tenant_id": "72f988bf-86f1-41af-91ab-2d7cd011db47",
    "subscription_id": "f8d440ed-264b-4a91-8ab9-0b1694914abf",
    "resource_group_name": "packer-westeurope",
    "vm-size": "Standard_NV12s_v3",
    "image_name": "ParsecNvidiaVS2019",
    "temp_compute_name": "parsecgoldnv4",
    "image_storage": "Standard_LRS",
    "storageAccount": "packerwesteurope",
    "capture_container_name": "vhds"
  },
  "builders": [
    {
      "type": "azure-arm",
      "use_azure_cli_auth": "true",
      "build_resource_group_name": "{{user `resource_group_name`}}",
      "capture_container_name": "{{user `capture_container_name`}}",
      "capture_name_prefix": "{{user `image_name`}}",
      "resource_group_name": "{{user `resource_group_name`}}",
      "storage_account": "{{user `storageAccount`}}",
      "temp_compute_name": "{{user `temp_compute_name`}}",
      "os_type": "Windows",
      "image_publisher": "MicrosoftWindowsServer",
      "image_offer": "WindowsServer",
      "image_sku": "2019-Datacenter",
      "communicator": "winrm",
      "winrm_use_ssl": "true",
      "winrm_insecure": "true",
      "winrm_timeout": "3m",
      "winrm_username": "packeradmin",
      "vm_size": "{{user `vm-size`}}",
      "managed_image_storage_account_type": "{{user `image_storage`}}"
    }
  ],
  "provisioners": [
    {
      "type": "shell-local",
      "inline": [
        "echo 'Installing Nvidia driver extension...'",
        "az vm extension set -g {{user `resource_group_name`}} --vm-name {{user `temp_compute_name`}} --name NvidiaGpuDriverWindows --publisher Microsoft.HpcCompute --version 1.3 --settings '{}'",
        "az vm extension wait --exists --name NvidiaGpuDriverWindows --resource-group {{user `resource_group_name`}} --vm-name {{user `temp_compute_name`}}",
        "echo 'Nvidia driver extension installation succeeded.'"
      ]
    },
    {
      "type": "powershell",
      "inline": [
        "echo 'Installing Chocolatey...'",
        " [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))",
        "echo 'Chocolatey installed.'"
      ]
    },
    {
      "type": "powershell",
      "inline": [
        "echo 'Installing Chocolatey packages...'",
        "choco install -y 7zip googlechrome directx",
        "echo 'Chocolatey packages installed.'"
      ]
    },
    {
      "type": "windows-restart",
      "restart_check_command": "powershell -command \"& {Write-Output 'restarted.'}\""
    },
    {
      "type": "powershell",
      "inline": [
        "echo '>>> Waiting for GA to start ...'",
        "while ((Get-Service RdAgent).Status -ne 'Running') { Start-Sleep -s 5 }",
        "while ((Get-Service WindowsAzureGuestAgent).Status -ne 'Running') { Start-Sleep -s 5 }",
        "echo '>>> Sysprepping VM ...'",
        "if( Test-Path $Env:SystemRoot\\windows\\system32\\Sysprep\\unattend.xml ){ rm $Env:SystemRoot\\windows\\system32\\Sysprep\\unattend.xml -Force}",
        "& $Env:SystemRoot\\System32\\Sysprep\\Sysprep.exe /oobe /generalize /quiet /quit",
        "while($true) { $imageState = Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Setup\\State | Select ImageState; if($imageState.ImageState -ne 'IMAGE_STATE_GENERALIZE_RESEAL_TO_OOBE') { Write-Output $imageState.ImageState; Start-Sleep -s 5  } else { break } }"
      ]
    }
  ],
  "post-processors": [
    {
      "type": "manifest"
    }
  ]
}
